import { Button, VerticalBox, HorizontalBox, GroupBox, LineEdit, TextEdit, ScrollView } from "std-widgets.slint";
import { Icons } from "style/app.slint";
import { FileTab } from "components/file_tab.slint";
import { TreeItem } from "components/tree_item.slint";
// import { STree } from "surrealism/index.slint";
// import { UseIcons } from "surrealism/use/index.slint";

export global Callbacks {
    callback create_file(string);
    callback open_file(string);
    callback close_file(string);
    callback save_file();
    callback update_content(string);
    callback update_editor_content(string);
}

export struct OpenFileData {
    path: string,
    is_dir: bool,
    is_modified: bool,
    is_active: bool,
}

// export global Utils {
//     pure function calculate-indent(file: string) -> int {
//         return file.length - file.trim().length;
//     }
// }

export component AppWindow inherits Window {
    title: "Nodian";
    preferred-width: 1024px;
    preferred-height: 768px;
    min-width: 800px;
    min-height: 600px;
    background: #ffffff;

    in property <[string]> file_tree: [];
    in property <[OpenFileData]> open_files: [];
    in property <string> preview_content: "";
    in-out property <string> editor_content: "";

    callback get_editor_content() -> string;

    HorizontalLayout {
        padding: 0px;
        spacing: 0px;

        Rectangle {
            width: 40px;
            background: #d4d4d4;
            border-radius: 0px;

            VerticalLayout {
                padding: 3px;
                spacing: 2px;
                alignment: start;

                Button {
                    width: 32px;
                    height: 32px;
                    icon: Icons.editor;
                    clicked => {
                    }
                }

                Button {
                    width: 32px;
                    height: 32px;
                    icon: Icons.calendar;
                    clicked => {
                    }
                }

                Button {
                    width: 32px;
                    height: 32px;
                    icon: Icons.json;
                    clicked => {
                    }
                }
            }
        }

        VerticalLayout {
            spacing: 0px;

            // Markdown Editor
            HorizontalLayout {
                // 目录树
                VerticalLayout {
                    Rectangle {
                        width: 180px;
                        background: #e8e8e8;
                        border-radius: 0px;

                        ScrollView {
                            VerticalLayout {
                                padding: 0px;
                                spacing: 0px;
                                for file in file_tree: TreeItem {
                                    name: file;
                                    indent: 1;
                                // indent: file.count(c => c == ' ') / 2;
                                clicked => {
                                        Callbacks.open_file(file);
                                    }
                                }
                            }
                        }
                    }
                }

                // 编辑器区域
                VerticalLayout {
                    // 文件标签
                    Rectangle {
                        height: 26px;
                        background: #e0e0e0;
                        HorizontalLayout {
                            spacing: 0px;
                            for file in open_files: FileTab {
                                file-name: file.path;
                                is-modified: file.is_modified;
                                is-active: file.is_active;
                                clicked => {
                                    Callbacks.open_file(file.path);
                                }
                                close-clicked => {
                                    Callbacks.close_file(file.path);
                                }
                            }
                        }
                    }

                    // 编辑器
                    HorizontalLayout { 
                        // 编辑器
                         TextEdit {
                            width: 300px;
                            font-size: 14px;
                            text: root.editor_content;
                            edited => {
                                root.editor_content = self.text;
                                Callbacks.update_editor_content(self.text);
                                Callbacks.update_content(self.text);
                            }
                        }

                        // 预览
                        Rectangle {
                            width: 300px;
                            background: #e8e8e8;
                            border-radius: 0px;

                            ScrollView {
                                Text {
                                    padding: 4px;
                                    color: #333;
                                    text: root.preview_content;
                                    wrap: word-wrap;
                                }
                            }
                        }
                    }
                }
            }

            HorizontalLayout {
                spacing: 1px;

                Button {
                    text: "预览";
                    width: 60px;
                    height: 26px;
                    clicked => {
                        // Callbacks.preview_file();
                    }
                }

                Button {
                    text: "保存";
                    width: 60px;
                    height: 26px;
                    clicked => {
                        Callbacks.save_file();
                    }
                }
            }
        }
    }

    callback save-shortcut();

    forward-focus: key-handler;

    key-handler := FocusScope {
        key-pressed(event) => {
            if (event.text == "s" && (event.modifiers.control || event.modifiers.meta)) {
                root.save-shortcut();
                return accept;
            }
            return reject;
        }
    }
}
